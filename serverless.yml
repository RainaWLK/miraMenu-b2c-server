# Welcome to Serverless!
#
# This file is the main config file for your service.
# It's very minimal at this point and uses default values.
# You can always add more config options for more control.
# We've included some commented out config examples here.
# Just uncomment any of them to get that config option.
#
# For full config options, check the docs:
#    docs.serverless.com
#
# Happy Coding!

service: miraMenu

# You can pin your service to only deploy with a specific Serverless version
# Check out our docs for more details
# frameworkVersion: "=X.X.X"
plugins:
  - serverless-plugin-include-dependencies
  - serverless-webpack
#  - serverless-offline

custom:
  webpackIncludeModules: true # enable auto including modules


provider:
  name: aws
  runtime: nodejs6.10
# you can overwrite defaults here
  stage: dev
  region: us-east-1
#  profile: production # The default profile to use with this service
  memorySize: 512 # Overwrite the default memory size. Default is 1024
  versionFunctions: true # optional, default is true
  stackTags: # Optional CF stack tags
   key: value
# you can add statements to the Lambda function's IAM Role here
  iamRoleStatements:
    - Effect: "Allow"
      Action:
        - "dynamodb:GetItem"
        - "dynamodb:ListTables"
        - "dynamodb:PutItem"
        - "dynamodb:UpdateItem"
        - "dynamodb:Query"
        - "dynamodb:Scan"
      Resource:
        Fn::Join:
          - ""
          - - "arn:aws:dynamodb:us-east-1:552950262288:table/*"

# you can add packaging information here
package:
  exclude:
    - src/**

functions:
  get_restaurant: # A Function
    handler: restaurant_api.get
    events: # The Events that trigger this Function
      - http:
          path: restaurants
          method: get
          cors: true
  get_restaurant_id: # A Function
    handler: restaurant_api.getByID
    events:
      - http:
          path: restaurants/{restaurant_id}
          method: get
          cors: true
#          authorizer: none
  get_branch: # A Function
    handler: branch_api.get
    events: # The Events that trigger this Function
      - http:
          path: restaurants/{restaurant_id}/branches
          method: get
          cors: true
  get_branch_id: # A Function
    handler: branch_api.getByID
    events: # The Events that trigger this Function
      - http:
          path: restaurants/{restaurant_id}/branches/{branch_id}
          method: get
          cors: true
  get_menu: # A Function
    handler: menu_api.get
    events: # The Events that trigger this Function
      - http:
          path: restaurants/{restaurant_id}/branches/{branch_id}/menus
          method: get
          cors: true
      - http:
          path: restaurants/{restaurant_id}/menus
          method: get
          cors: true
  get_menu_id: # A Function
    handler: menu_api.getByID
    events: # The Events that trigger this Function
      - http:
          path: restaurants/{restaurant_id}/branches/{branch_id}/menus/{menu_id}
          method: get
          cors: true
      - http:
          path: restaurants/{restaurant_id}/menus/{menu_id}
          method: get
          cors: true
  get_item: # A Function
    handler: item_api.get
    events: # The Events that trigger this Function
      - http:
          path: restaurants/{restaurant_id}/branches/{branch_id}/items
          method: get
          cors: true
      - http:
          path: restaurants/{restaurant_id}/items
          method: get
          cors: true
  get_item_id: # A Function
    handler: item_api.get
    events: # The Events that trigger this Function
      - http:
          path: restaurants/{restaurant_id}/branches/{branch_id}/items/{item_id}
          method: get
          cors: true
      - http:
          path: restaurants/{restaurant_id}/items/{item_id}
          method: get
          cors: true

#    The following are a few example events you can configure
#    NOTE: Please make sure to change your handler code to work with those events
#    Check the event documentation for details
#    events:
#      - http:
#          path: users/create
#          method: get
#      - s3: ${env:BUCKET}
#      - schedule: rate(10 minutes)
#      - sns: greeter-topic
#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000
#      - alexaSkill
#      - iot:
#          sql: "SELECT * FROM 'some_topic'"
#      - cloudwatchEvent:
#          event:
#            source:
#              - "aws.ec2"
#            detail-type:
#              - "EC2 Instance State-change Notification"
#            detail:
#              state:
#                - pending
#      - cloudwatchLog: '/aws/lambda/hello'

#    Define function environment variables here
#    environment:
#      variable2: value2

# you can add CloudFormation resource templates here
#resources:
#  Resources:
#    NewResource:
#      Type: AWS::S3::Bucket
#      Properties:
#        BucketName: my-new-bucket
#  Outputs:
#     NewOutput:
#       Description: "Description for the output"
#       Value: "Some output value"
